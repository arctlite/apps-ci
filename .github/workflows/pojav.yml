name: "Build PojavLauncher Daily ☀️"

on:
  # A daily dose of progress and positivity 🌸
  schedule:
    - cron: '0 0 * * *'  # A new day, a new adventure! 🌅
  # For those who can't wait—just press the button! 🎉
  workflow_dispatch: 

jobs:
  build:
    # Our reliable builder buddy 🛠️
    runs-on: ubuntu-22.04

    env:
      CURSEFORGE_API_KEY: ${{ secrets.CURSEFORGE_API_KEY }}

    steps:
      # 🏡 Starting with a clean slate!
      - name: "🏡 Start Fresh"
        uses: actions/checkout@v3
        with:
          fetch-depth: 1  # No baggage, just the essentials! 🎒

      # 🌟 Clone the PojavLauncher repository
      - name: "🌟 Clone PojavLauncher Repository"
        run: |
          git clone https://github.com/PojavLauncherTeam/PojavLauncher.git --depth 1 pojav
          cd pojav
          CURRENT_COMMIT_HASH=$(git rev-parse HEAD)
          CURRENT_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          CURRENT_COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          CURRENT_COMMIT_DATE=$(git log -1 --pretty=format:"%cd" --date=short)
          echo "Commit Details: 📝"
          echo "  Hash: $CURRENT_COMMIT_HASH"
          echo "  Message: $CURRENT_COMMIT_MSG"
          echo "  Author: $CURRENT_COMMIT_AUTHOR"
          echo "  Date: $CURRENT_COMMIT_DATE"
          echo "Saving commit details to the environment... 📦"
          echo "CURRENT_COMMIT_HASH=$CURRENT_COMMIT_HASH" >> $GITHUB_ENV
          echo "CURRENT_COMMIT_MSG=$CURRENT_COMMIT_MSG" >> $GITHUB_ENV
          echo "CURRENT_COMMIT_AUTHOR=$CURRENT_COMMIT_AUTHOR" >> $GITHUB_ENV
          echo "CURRENT_COMMIT_DATE=$CURRENT_COMMIT_DATE" >> $GITHUB_ENV

      # 🔍 Check for updates from the last build
      - name: "🔍 Retrieve Latest Release Commit Hash"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Looking for previous build info..."
          gh release download --repo arctlite/apps-ci --pattern "commit_hash.txt" --dir ./release_info || echo "No previous build info found! Starting fresh. 🌱"

          if [ -f ./release_info/commit_hash.txt ]; then
            PREVIOUS_COMMIT_HASH=$(cat ./release_info/commit_hash.txt)
            echo "Found previous commit hash: $PREVIOUS_COMMIT_HASH 🗂️"
            echo "PREVIOUS_COMMIT_HASH=$PREVIOUS_COMMIT_HASH" >> $GITHUB_ENV
          else
            echo "No previous commit hash. It's a clean start! 🌟"
            echo "PREVIOUS_COMMIT_HASH=" >> $GITHUB_ENV
          fi

      # 🔄 Compare the current and previous builds
      - name: "🔄 Compare Commit Hashes"
        run: |
          if [ "$PREVIOUS_COMMIT_HASH" == "$CURRENT_COMMIT_HASH" ]; then
            echo "No changes detected since the last build. Take the day off! 🌴"
            exit 1  # Exiting gracefully to save resources
          else
            echo "New changes spotted—let's get to work! 🛠️"
          fi

      # 🌿 Brew some Java (JDK 17)
      - name: "🌿 Brew Some Java (JDK 17)"
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 🛠️ Prepare the workspace with the Android SDK
      - name: "🛠️ Setting Up the Toolshed (Android SDK)"
        run: ./scripts/setup_sdk.sh

      # ✂️ Apply patches to make everything smooth
      - name: "✂️ Apply Patches"
        run: |
          cd pojav
          patch -p1 < ../patches/PojavLauncher/splitapk.patch
          echo "Patch applied! Smooth sailing ahead. ⛵"

      # 🛠️ Build the APKs
      - name: "🛠️ Build APKs"
        run: |
          cd pojav
          ../scripts/pojav/build_apks.sh
          echo "APKs built to perfection! 🏗️✨"

      # 🖋️ Sign the APKs with care
      - name: "🖋️ Sign APKs"
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          cd pojav
          ../scripts/pojav/sign_apks.sh
          echo "Signed, sealed, and ready to deliver! 📜📦"

      # 📦 Create a GitHub release with a unique tag per app
      - name: "📦 Create GitHub Release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          APP_NAME="pojavlauncher"
          TAG_NAME="${APP_NAME}-${{ env.CURRENT_COMMIT_HASH:0:7 }}" # Shortened commit hash
          echo "Using tag: $TAG_NAME"

          # Create the release with the custom tag
          gh release create "$TAG_NAME" \
            --title "${APP_NAME} Build (${TAG_NAME})" \
            --notes "✨ Automated build of ${APP_NAME}. ✨

            **Commit Details**
            - **Hash**: ${{ env.CURRENT_COMMIT_HASH }}
            - **Message**: ${{ env.CURRENT_COMMIT_MSG }}
            - **Author**: ${{ env.CURRENT_COMMIT_AUTHOR }}
            - **Date**: ${{ env.CURRENT_COMMIT_DATE }}" \
            --target main

      # 📤 Upload APKs to the release
      - name: "📤 Upload Each APK to Release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Sending the APKs off to their new home! 🏠"
          for apk in pojav/app_pojavlauncher/build/outputs/apk/release/*-signed.apk; do
            gh release upload "pojavlauncher-${{ env.CURRENT_COMMIT_HASH:0:7 }}" "$apk"
          done

      # 📤 Upload commit hash info to the release
      - name: "📤 Upload Commit Hash to Release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Saving the commit hash for posterity. 📖"
          echo ${{ env.CURRENT_COMMIT_HASH }} > commit_hash.txt
          gh release upload "pojavlauncher-${{ env.CURRENT_COMMIT_HASH:0:7 }}" "commit_hash.txt"
          echo "Commit hash uploaded successfully! 📝"

      # 📤 Sharing the Results (Discord)
      - name: "📤 Sharing the Results (Discord)"
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GITHUB_REPO: ${{ github.repository }}
          GITHUB_BRANCH: ${{ github.ref_name }}
          GITHUB_COMMIT: ${{ github.sha }}
        run: |
          cd pojav
          ../scripts/pojav/discord_upload.sh
          echo "Results shared with the world—mission accomplished! 🌍"

